
1) Write a command that will enable a user to pull orders grouped by date out of the Orders table quickly.


mysql> CREATE INDEX idx_odate ON ORDERS(ODATE);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> SELECT ODATE FROM ORDERS
    -> GROUP BY ODATE;
+------------+
| ODATE      |
+------------+
| 1990-10-03 |
| 1990-10-04 |
| 1990-10-06 |
+------------+
3 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


2) If the Orders table has already been created, how can you force the onum field to be unique (assume all current values are unique)?


mysql> ALTER TABLE ORDERS
    -> ADD CONSTRAINT UNIQUE_ONUM UNIQUE (ONUM);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> DESC ORDERS;
+-------+------------+------+-----+---------+-------+
| Field | Type       | Null | Key | Default | Extra |
+-------+------------+------+-----+---------+-------+
| ONUM  | int        | YES  | UNI | NULL    |       |
| AMT   | float(7,2) | YES  |     | NULL    |       |
| ODATE | date       | YES  | MUL | NULL    |       |
| CNUM  | int        | YES  |     | NULL    |       |
| SNUM  | int        | YES  |     | NULL    |       |
+-------+------------+------+-----+---------+-------+
5 rows in set (0.01 sec)



-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


3) Create an index that would permit each salesperson to retrieve his or her orders grouped by date quickly.


mysql> CREATE INDEX idx_salesperson_snum_date ON ORDERS(SNUM, ODATE);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


4) Let us assume that each salesperson is to have only one customer of a given rating, and that this is currently the case. Enter a command that enforces it.


mysql> ALTER TABLE CUSTOMERS
    -> ADD CONSTRAINT compositekey_snum_rating UNIQUE (SNUM, RATING);
ERROR 1062 (23000): Duplicate entry '1004-200' for key 'customers.compositekey_snum_rating'


mysql> SELECT * FROM CUSTOMERS;
+------+----------+----------+--------+------+
| CNUM | CNAME    | CITY     | RATING | SNUM |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    300 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1004 |
| 2004 | Grass    | Berlin   |    300 | 1004 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    200 | 1004 |
+------+----------+----------+--------+------+
6 rows in set (0.00 sec)


THE QUEARY RUNS PERFECTLY, BUT IT'S GIVING ERROR DUE TO THERE ARE TWO IDENTICAL VALUES WITH SAME RATING AS WELL AS SNUM.


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

