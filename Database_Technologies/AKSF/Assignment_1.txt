
TASK 1

Create all three tables

mysql> CREATE TABLE DEPARTMENTS (
    -> DEPARTMENT_ID INT PRIMARY KEY,
    -> DEPARTMENT_NAME VARCHAR(20) UNIQUE
    -> );
Query OK, 0 rows affected (0.07 sec)



mysql> CREATE TABLE EMPLOYEES (
    -> EMPLOYEE_ID INT PRIMARY KEY,
    -> FIRST_NAME VARCHAR(20) NOT NULL,
    -> LAST_NAME VARCHAR(20) NOT NULL,
    -> EMAIL VARCHAR(50) UNIQUE,
    -> HIRE_DATE DATE NOT NULL,
    -> SALARY INT,
    -> DEPARTMENT_ID INT,
    -> FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
    -> );
Query OK, 0 rows affected (0.04 sec)


mysql> CREATE TABLE PROJECTS (
    -> PROJECT_ID INT PRIMARY KEY,
    -> PROJECT_NAME VARCHAR(50),
    -> START_DATE DATE,
    -> END_DATE DATE,
    -> DEPARTMENT_ID INT,
    -> FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
    -> );
Query OK, 0 rows affected (0.03 sec)


------------------------------------------------------------------------------------------


Check all three tables

mysql> DESC DEPARTMENTS;
+-----------------+-------------+------+-----+---------+-------+
| Field           | Type        | Null | Key | Default | Extra |
+-----------------+-------------+------+-----+---------+-------+
| DEPARTMENT_ID   | int         | NO   | PRI | NULL    |       |
| DEPARTMENT_NAME | varchar(20) | YES  | UNI | NULL    |       |
+-----------------+-------------+------+-----+---------+-------+
2 rows in set (0.01 sec)



mysql> DESC EMPLOYEES;
+---------------+-------------+------+-----+---------+-------+
| Field         | Type        | Null | Key | Default | Extra |
+---------------+-------------+------+-----+---------+-------+
| EMPLOYEE_ID   | int         | NO   | PRI | NULL    |       |
| FIRST_NAME    | varchar(20) | NO   |     | NULL    |       |
| LAST_NAME     | varchar(20) | NO   |     | NULL    |       |
| EMAIL         | varchar(50) | YES  | UNI | NULL    |       |
| HIRE_DATE     | date        | NO   |     | NULL    |       |
| SALARY        | int         | YES  |     | NULL    |       |
| DEPARTMENT_ID | int         | YES  | MUL | NULL    |       |
+---------------+-------------+------+-----+---------+-------+
7 rows in set (0.00 sec)



mysql> DESC PROJECTS;
+---------------+-------------+------+-----+---------+-------+
| Field         | Type        | Null | Key | Default | Extra |
+---------------+-------------+------+-----+---------+-------+
| PROJECT_ID    | int         | NO   | PRI | NULL    |       |
| PROJECT_NAME  | varchar(50) | YES  |     | NULL    |       |
| START_DATE    | date        | YES  |     | NULL    |       |
| END_DATE      | date        | YES  |     | NULL    |       |
| DEPARTMENT_ID | int         | YES  | MUL | NULL    |       |
+---------------+-------------+------+-----+---------+-------+
5 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


TASK 2



mysql> INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME)
    -> VALUES
    -> (1, 'IT'),
    -> (2, 'HR'),
    -> (3, 'Sales'),
    -> (4, 'Finance'),
    -> (5, 'Marketing');
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0



mysql> INSERT INTO PROJECTS(PROJECT_ID, PROJECT_NAME, START_DATE, END_DATE, DEPARTMENT_ID)
    -> VALUES
    -> (201, 'Project Phoenix', '2021-01-15', '2022-07-30', 1),
    -> (202, 'Client Onboarding', '2020-06-20', NULL, 3),
    -> (203, 'Financial Overhaul', '2019-03-10', '2021-12-15', 4),
    -> (204, 'Marketing Revamp', '2022-03-01', NULL, 5),
    -> (205, 'Internal System Audit', '2023-02-15', NULL, 2);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0


mysql> INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, HIRE_DATE, SALARY, DEPARTMENT_ID)
    -> VALUES
    -> (101, 'Ravi', 'Sharma', 'ravi.sharma@specialforce.com', '2017-05-15', 55000, 1),
    -> (102, 'Neha', 'Kapoor', 'neha.kapoor@specialforce.com', '2019-03-23', 48000, 2),
    -> (103, 'Jyoti', 'Verma', 'jyoti.verma@specialforce.com', '2020-11-02', 60000, 1),
    -> (104, 'Anil', 'Patil', 'anil.patil@specialforce.com', '2018-09-18', 70000, 3),
    -> (105, 'Pooja', 'Singh', 'pooja.singh@specialforce.com', '2021-06-10', 40000, 4),
    -> (106, 'Sanjay', 'Iyer', 'sanjay.iyer@specialforce.com', '2018-01-22', 75000, 3),
    -> (107, 'Jatin', 'Reddy', 'jatin.reddy@specialforce.com', '2021-12-12', 85000, 2),
    -> (108, 'Shreya', 'Mehta', 'shreya.mehta@specialforce.com', '2022-04-19', 30000, 5),
    -> (109, 'Rajesh', 'Gupta', 'rajesh.gupta@specialforce.com', '2020-08-11', 90000, 1),
    -> (110, 'Kavita', 'Nair', 'kavita.nair@specialforce.com', '2021-02-07', 50000, 2);
Query OK, 10 rows affected (0.01 sec)
Records: 10  Duplicates: 0  Warnings: 0


------------------------------------------------------------------------------------------


mysql> SELECT * FROM DEPARTMENTS;;
+---------------+-----------------+
| DEPARTMENT_ID | DEPARTMENT_NAME |
+---------------+-----------------+
|             4 | Finance         |
|             2 | HR              |
|             1 | IT              |
|             5 | Marketing       |
|             3 | Sales           |
+---------------+-----------------+
5 rows in set (0.00 sec)


mysql> SELECT * FROM PROJECTS;
+------------+-----------------------+------------+------------+---------------+
| PROJECT_ID | PROJECT_NAME          | START_DATE | END_DATE   | DEPARTMENT_ID |
+------------+-----------------------+------------+------------+---------------+
|        201 | Project Phoenix       | 2021-01-15 | 2022-07-30 |             1 |
|        202 | Client Onboarding     | 2020-06-20 | NULL       |             3 |
|        203 | Financial Overhaul    | 2019-03-10 | 2021-12-15 |             4 |
|        204 | Marketing Revamp      | 2022-03-01 | NULL       |             5 |
|        205 | Internal System Audit | 2023-02-15 | NULL       |             2 |
+------------+-----------------------+------------+------------+---------------+
5 rows in set (0.00 sec)


mysql> SELECT * FROM EMPLOYEES;
+-------------+------------+-----------+-------------------------------+------------+--------+---------------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | EMAIL                         | HIRE_DATE  | SALARY | DEPARTMENT_ID |
+-------------+------------+-----------+-------------------------------+------------+--------+---------------+
|         101 | Ravi       | Sharma    | ravi.sharma@specialforce.com  | 2017-05-15 |  55000 |             1 |
|         102 | Neha       | Kapoor    | neha.kapoor@specialforce.com  | 2019-03-23 |  48000 |             2 |
|         103 | Jyoti      | Verma     | jyoti.verma@specialforce.com  | 2020-11-02 |  60000 |             1 |
|         104 | Anil       | Patil     | anil.patil@specialforce.com   | 2018-09-18 |  70000 |             3 |
|         105 | Pooja      | Singh     | pooja.singh@specialforce.com  | 2021-06-10 |  40000 |             4 |
|         106 | Sanjay     | Iyer      | sanjay.iyer@specialforce.com  | 2018-01-22 |  75000 |             3 |
|         107 | Jatin      | Reddy     | jatin.reddy@specialforce.com  | 2021-12-12 |  85000 |             2 |
|         108 | Shreya     | Mehta     | shreya.mehta@specialforce.com | 2022-04-19 |  30000 |             5 |
|         109 | Rajesh     | Gupta     | rajesh.gupta@specialforce.com | 2020-08-11 |  90000 |             1 |
|         110 | Kavita     | Nair      | kavita.nair@specialforce.com  | 2021-02-07 |  50000 |             2 |
+-------------+------------+-----------+-------------------------------+------------+--------+---------------+
10 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 1: Write a query to retrieve the first name, last name, and department name of all
employees. If an employee does not belong to any department, the department name should be
NULL

mysql> SELECT E.FIRST_NAME, E.LAST_NAME, D.DEPARTMENT_NAME
    -> FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
    -> ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
+------------+-----------+-----------------+
| FIRST_NAME | LAST_NAME | DEPARTMENT_NAME |
+------------+-----------+-----------------+
| Ravi       | Sharma    | IT              |
| Neha       | Kapoor    | HR              |
| Jyoti      | Verma     | IT              |
| Anil       | Patil     | Sales           |
| Pooja      | Singh     | Finance         |
| Sanjay     | Iyer      | Sales           |
| Jatin      | Reddy     | HR              |
| Shreya     | Mehta     | Marketing       |
| Rajesh     | Gupta     | IT              |
| Kavita     | Nair      | HR              |
+------------+-----------+-----------------+
10 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 2: Write a query to find all employees in the IT department who earn more than â‚¹50,000. 


mysql> SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME
    -> FROM EMPLOYEES E JOIN DEPARTMENTS D
    -> ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    -> WHERE D.DEPARTMENT_NAME = 'IT' AND E.SALARY > 50000;
+------------+-----------+--------+-----------------+
| FIRST_NAME | LAST_NAME | SALARY | DEPARTMENT_NAME |
+------------+-----------+--------+-----------------+
| Ravi       | Sharma    |  55000 | IT              |
| Jyoti      | Verma     |  60000 | IT              |
| Rajesh     | Gupta     |  90000 | IT              |
+------------+-----------+--------+-----------------+
3 rows in set (0.00 sec)



-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 3: Write a query to list the first name, last name, and email of all employees whose first
name starts with 'J' and whose email contains specialforce.com. 


mysql> SELECT FIRST_NAME, LAST_NAME, EMAIL FROM EMPLOYEES
    -> WHERE FIRST_NAME LIKE 'J%'
    -> AND EMAIL LIKE '%specialforce.com';
+------------+-----------+------------------------------+
| FIRST_NAME | LAST_NAME | EMAIL                        |
+------------+-----------+------------------------------+
| Jyoti      | Verma     | jyoti.verma@specialforce.com |
| Jatin      | Reddy     | jatin.reddy@specialforce.com |
+------------+-----------+------------------------------+
2 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 4: Write a query to find all the distinct department names in the Departments table. 

mysql> SELECT DISTINCT DEPARTMENT_NAME FROM DEPARTMENTS;
+-----------------+
| DEPARTMENT_NAME |
+-----------------+
| Finance         |
| HR              |
| IT              |
| Marketing       |
| Sales           |
+-----------------+
5 rows in set (0.00 sec)


BUT THE THING HERE IS, I HAVE ALREADY SPECIFIED THE DEPARTMENT_NAME IN DEPARTMENTS TABLE IS UNIQUE VALUE.
SO WITHOUT USING DISTINCT IT'S SHOWING DISTINCT DEPARTMENTS.
 

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 5: Write a query to calculate the total salary expenditure of each department. 


mysql> SELECT D.DEPARTMENT_NAME, SUM(SALARY) FROM EMPLOYEES E, DEPARTMENTS D
    -> WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
    -> GROUP BY D.DEPARTMENT_NAME;
+-----------------+-------------+
| DEPARTMENT_NAME | SUM(SALARY) |
+-----------------+-------------+
| Finance         |       40000 |
| HR              |      183000 |
| IT              |      205000 |
| Marketing       |       30000 |
| Sales           |      145000 |
+-----------------+-------------+
5 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 6: Write a query to find the average salary of employees in the Finance department. 


mysql> SELECT AVG(E.SALARY) AVERAGE_SALARY_FINANCE FROM EMPLOYEES E, DEPARTMENTS D
    -> WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID AND D.DEPARTMENT_NAME = 'FINANCE';
+------------------------+
| AVERAGE_SALARY_FINANCE |
+------------------------+
|             40000.0000 |
+------------------------+
1 row in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 7: Write a query to find the minimum and maximum salaries of employees in the Sales
department. 


mysql> SELECT MIN(E.SALARY) MINIMUM_SALARY, MAX(E.SALARY) MAXIMUM_SALARY FROM EMPLOYEES E, DEPARTMENTS D
    -> WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
    -> AND D.DEPARTMENT_NAME = 'SALES';
+----------------+----------------+
| MINIMUM_SALARY | MAXIMUM_SALARY |
+----------------+----------------+
|          70000 |          75000 |
+----------------+----------------+
1 row in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 8: Write a query to count the number of employees in each department. 


mysql> SELECT D.DEPARTMENT_NAME, COUNT(*) FROM EMPLOYEES E, DEPARTMENTS D
    -> WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
    -> GROUP BY D.DEPARTMENT_NAME;
+-----------------+----------+
| DEPARTMENT_NAME | COUNT(*) |
+-----------------+----------+
| Finance         |        1 |
| HR              |        3 |
| IT              |        3 |
| Marketing       |        1 |
| Sales           |        2 |
+-----------------+----------+
5 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

Query 9: Write a query to find all employees who were hired between January 1, 2018, and
December 31, 2020. Sort the result by hire date in ascending order.


mysql> SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE FROM EMPLOYEES
    -> WHERE HIRE_DATE BETWEEN '2018-01-01' AND '2020-12-31'
    -> ORDER BY HIRE_DATE;
+-------------+------------+-----------+------------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | HIRE_DATE  |
+-------------+------------+-----------+------------+
|         106 | Sanjay     | Iyer      | 2018-01-22 |
|         104 | Anil       | Patil     | 2018-09-18 |
|         102 | Neha       | Kapoor    | 2019-03-23 |
|         109 | Rajesh     | Gupta     | 2020-08-11 |
|         103 | Jyoti      | Verma     | 2020-11-02 |
+-------------+------------+-----------+------------+
5 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 10: Write a query to list all employees who do not have an email address. 

mysql> SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME FROM EMPLOYEES
    -> WHERE EMAIL IS NULL;
Empty set (0.00 sec)



-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 11: Write a query to find all employees who work in HR, Finance, or IT departments

mysql> SELECT D.DEPARTMENT_NAME, E.FIRST_NAME, E.LAST_NAME FROM EMPLOYEES E, DEPARTMENTS D
    -> WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID AND
    -> D.DEPARTMENT_NAME IN ('HR', 'FINANCE', 'IT');
+-----------------+------------+-----------+
| DEPARTMENT_NAME | FIRST_NAME | LAST_NAME |
+-----------------+------------+-----------+
| Finance         | Pooja      | Singh     |
| HR              | Neha       | Kapoor    |
| HR              | Jatin      | Reddy     |
| HR              | Kavita     | Nair      |
| IT              | Ravi       | Sharma    |
| IT              | Jyoti      | Verma     |
| IT              | Rajesh     | Gupta     |
+-----------------+------------+-----------+
7 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 12: Write a query to list the first name, last name, and salary of employees earning
between â‚¹30,000 and â‚¹70,000. Sort the results by salary in descending order. 


mysql> SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
    -> WHERE SALARY BETWEEN 30000 AND 70000;
+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| Ravi       | Sharma    |  55000 |
| Neha       | Kapoor    |  48000 |
| Jyoti      | Verma     |  60000 |
| Anil       | Patil     |  70000 |
| Pooja      | Singh     |  40000 |
| Shreya     | Mehta     |  30000 |
| Kavita     | Nair      |  50000 |
+------------+-----------+--------+
7 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

Transaction Management Tasks:
 

Task 1: Increase HR Salaries:
Write a query to increase the salaries of all employees in the HR department by 5%. Start a
transaction before applying the changes. 



mysql> START TRANSACTION;
Query OK, 0 rows affected (0.00 sec)

mysql> UPDATE EMPLOYEES
    -> SET SALARY = SALARY * 1.05
    -> WHERE DEPARTMENT_ID = (
    -> SELECT DEPARTMENT_ID FROM DEPARTMENTS
    -> WHERE DEPARTMENT_NAME = 'HR');
Query OK, 3 rows affected (0.00 sec)
Rows matched: 3  Changed: 3  Warnings: 0


mysql> SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
    -> WHERE DEPARTMENT_ID = (
    -> SELECT DEPARTMENT_ID FROM DEPARTMENTS
    -> WHERE DEPARTMENT_NAME = 'HR');
+-------------+------------+-----------+--------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | SALARY |
+-------------+------------+-----------+--------+
|         102 | Neha       | Kapoor    |  50400 |
|         107 | Jatin      | Reddy     |  89250 |
|         110 | Kavita     | Nair      |  52500 |
+-------------+------------+-----------+--------+
3 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------


Task 2: Savepoint Before Sales Increase:
Set a savepoint before increasing the salaries of employees in the Sales department by 3%. 



START TRANSACTION;

Query OK, 0 rows affected (0.00 sec)


SAVEPOINT S1;

Query OK, 0 rows affected (0.00 sec)


UPDATE EMPLOYEES
SET SALARY = SALARY * 1.03
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'SALES');

Query OK, 2 rows affected (0.02 sec)
Rows matched: 2  Changed: 2  Warnings: 0


SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'SALES');

+-------------+------------+-----------+--------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | SALARY |
+-------------+------------+-----------+--------+
|         104 | Anil       | Patil     |  72100 |
|         106 | Sanjay     | Iyer      |  77250 |
+-------------+------------+-----------+--------+
2 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------

Task 3: Rollback Sales Salary Increase:
Rollback to the savepoint created before the Sales salary increase.


ROLLBACK TO SAVEPOINT S1;

Query OK, 0 rows affected (0.02 sec)


SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'SALES');

+-------------+------------+-----------+--------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | SALARY |
+-------------+------------+-----------+--------+
|         104 | Anil       | Patil     |  70000 |
|         106 | Sanjay     | Iyer      |  75000 |
+-------------+------------+-----------+--------+
2 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------


Task 4: Commit the Transaction:
After rolling back the Sales increase, commit the changes made to the HR department salaries. 



COMMIT;

Query OK, 0 rows affected (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 13: Write a query to join the Employees and Departments tables to list employees and their department names. Make sure all employees are included, even if they donâ€™t belong to any department. 


SELECT E.FIRST_NAME, E.LAST_NAME, D.DEPARTMENT_NAME FROM EMPLOYEES E
LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;


+------------+-----------+-----------------+
| FIRST_NAME | LAST_NAME | DEPARTMENT_NAME |
+------------+-----------+-----------------+
| Ravi       | Sharma    | IT              |
| Neha       | Kapoor    | HR              |
| Jyoti      | Verma     | IT              |
| Anil       | Patil     | Sales           |
| Pooja      | Singh     | Finance         |
| Sanjay     | Iyer      | Sales           |
| Jatin      | Reddy     | HR              |
| Shreya     | Mehta     | Marketing       |
| Rajesh     | Gupta     | IT              |
| Kavita     | Nair      | HR              |
+------------+-----------+-----------------+
10 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 14: Write a query to list employees who are working on projects that started after January
1, 2023. 


SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, P.PROJECT_NAME, P.START_DATE FROM EMPLOYEES E
JOIN PROJECTS P ON E.DEPARTMENT_ID = P.DEPARTMENT_ID
WHERE P.START_DATE > '2023-01-01'; 



+-------------+------------+-----------+-----------------------+------------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | PROJECT_NAME          | START_DATE |
+-------------+------------+-----------+-----------------------+------------+
|         102 | Neha       | Kapoor    | Internal System Audit | 2023-02-15 |
|         107 | Jatin      | Reddy     | Internal System Audit | 2023-02-15 |
|         110 | Kavita     | Nair      | Internal System Audit | 2023-02-15 |
+-------------+------------+-----------+-----------------------+------------+
3 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 15: Write a query to list all departments, even those without any employees assigned. 


SELECT D.DEPARTMENT_NAME, E.FIRST_NAME, E.LAST_NAME FROM DEPARTMENTS D
LEFT JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;


+-----------------+------------+-----------+
| DEPARTMENT_NAME | FIRST_NAME | LAST_NAME |
+-----------------+------------+-----------+
| Finance         | Pooja      | Singh     |
| HR              | Neha       | Kapoor    |
| HR              | Jatin      | Reddy     |
| HR              | Kavita     | Nair      |
| IT              | Ravi       | Sharma    |
| IT              | Jyoti      | Verma     |
| IT              | Rajesh     | Gupta     |
| Marketing       | Shreya     | Mehta     |
| Sales           | Anil       | Patil     |
| Sales           | Sanjay     | Iyer      |
+-----------------+------------+-----------+
10 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 16: Write a query to find the employee with the highest salary in each department. 



SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.SALARY = (
SELECT MAX(SALARY) FROM EMPLOYEES
WHERE DEPARTMENT_ID = E.DEPARTMENT_ID);

+------------+-----------+--------+-----------------+
| FIRST_NAME | LAST_NAME | SALARY | DEPARTMENT_NAME |
+------------+-----------+--------+-----------------+
| Pooja      | Singh     |  40000 | Finance         |
| Jatin      | Reddy     |  89250 | HR              |
| Rajesh     | Gupta     |  90000 | IT              |
| Shreya     | Mehta     |  30000 | Marketing       |
| Sanjay     | Iyer      |  75000 | Sales           |
+------------+-----------+--------+-----------------+
5 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 17: Write a query to remove all data from the Employees table but keep the structure intact. 


TRUNCATE TABLE EMPLOYEES;

Query OK, 0 rows affected (0.12 sec)



SELECT * FROM EMPLOYEES;
Empty set (0.00 sec)


DESC EMPLOYEES;
+---------------+-------------+------+-----+---------+-------+
| Field         | Type        | Null | Key | Default | Extra |
+---------------+-------------+------+-----+---------+-------+
| EMPLOYEE_ID   | int         | NO   | PRI | NULL    |       |
| FIRST_NAME    | varchar(20) | NO   |     | NULL    |       |
| LAST_NAME     | varchar(20) | NO   |     | NULL    |       |
| EMAIL         | varchar(50) | YES  | UNI | NULL    |       |
| HIRE_DATE     | date        | NO   |     | NULL    |       |
| SALARY        | int         | YES  |     | NULL    |       |
| DEPARTMENT_ID | int         | YES  | MUL | NULL    |       |
| PHONE_NUMBER  | varchar(15) | YES  | UNI | NULL    |       |
+---------------+-------------+------+-----+---------+-------+
8 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 18: Write a query to drop the Projects table from the database. 


DROP TABLE PROJECTS;

Query OK, 0 rows affected (0.04 sec)



SHOW TABLES;

+----------------+
| Tables_in_aksf |
+----------------+
| departments    |
| employees      |
+----------------+
2 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 19: SpecialForce Private Limited realized they need to store the phone numbers of
employees. Write a query to add a new column phone_number (VARCHAR(15)) to the Employees
table using the ALTER statement. 


ALTER TABLE EMPLOYEES
ADD PHONE_NUMBER VARCHAR(15) UNIQUE;

Query OK, 0 rows affected (0.17 sec)
Records: 0  Duplicates: 0  Warnings: 0


DESC EMPLOYEES;

+---------------+-------------+------+-----+---------+-------+
| Field         | Type        | Null | Key | Default | Extra |
+---------------+-------------+------+-----+---------+-------+
| EMPLOYEE_ID   | int         | NO   | PRI | NULL    |       |
| FIRST_NAME    | varchar(20) | NO   |     | NULL    |       |
| LAST_NAME     | varchar(20) | NO   |     | NULL    |       |
| EMAIL         | varchar(50) | YES  | UNI | NULL    |       |
| HIRE_DATE     | date        | NO   |     | NULL    |       |
| SALARY        | int         | YES  |     | NULL    |       |
| DEPARTMENT_ID | int         | YES  | MUL | NULL    |       |
| PHONE_NUMBER  | varchar(15) | YES  | UNI | NULL    |       |
+---------------+-------------+------+-----+---------+-------+
8 rows in set (0.01 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 20: The company also decided to track the budget for each project. Write a query to add a column budget (DECIMAL(10,2)) to the Projects table. 


ALTER TABLE PROJECTS
ADD BUDGET DECIMAL(10,2) CHECK(BUDGET >= 0);

Query OK, 5 rows affected (0.15 sec)
Records: 5  Duplicates: 0  Warnings: 0


DESC PROJECTS;

+---------------+---------------+------+-----+---------+-------+
| Field         | Type          | Null | Key | Default | Extra |
+---------------+---------------+------+-----+---------+-------+
| PROJECT_ID    | int           | NO   | PRI | NULL    |       |
| PROJECT_NAME  | varchar(50)   | YES  |     | NULL    |       |
| START_DATE    | date          | YES  |     | NULL    |       |
| END_DATE      | date          | YES  |     | NULL    |       |
| DEPARTMENT_ID | int           | YES  | MUL | NULL    |       |
| BUDGET        | decimal(10,2) | YES  |     | NULL    |       |
+---------------+---------------+------+-----+---------+-------+
6 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 21: Write a query to find the 2nd largest salary from the Employees table using:
ï‚· A subquery.
ï‚· The LIMIT clause. 


ï‚· A subquery.

SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
WHERE SALARY = (
SELECT MAX(SALARY) FROM EMPLOYEES
WHERE SALARY < (
SELECT MAX(SALARY) FROM EMPLOYEES)
);


+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| Jatin      | Reddy     |  89250 |
+------------+-----------+--------+
1 row in set (0.00 sec)



ï‚· The LIMIT clause. 

SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
ORDER BY SALARY DESC
LIMIT 1 OFFSET 1;

+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| Jatin      | Reddy     |  89250 |
+------------+-----------+--------+
1 row in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 22: Write a query to find the 3rd largest salary from the Employees table using:
ï‚· A subquery.
ï‚· The LIMIT clause. 


ï‚· A subquery.

SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
WHERE SALARY = (
	SELECT MAX(SALARY) FROM EMPLOYEES
	WHERE SALARY < (
		SELECT MAX(SALARY) FROM EMPLOYEES
		WHERE SALARY < (
			SELECT MAX(SALARY) FROM EMPLOYEES)
			)
		);
		

+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| Sanjay     | Iyer      |  75000 |
+------------+-----------+--------+
1 row in set (0.00 sec)




ï‚· The LIMIT clause. 

SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
ORDER BY SALARY DESC
LIMIT 1 OFFSET 2;

+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| Sanjay     | Iyer      |  75000 |
+------------+-----------+--------+
1 row in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 23: Write a query to drop the Projects table. 


DROP TABLE PROJECTS;

Query OK, 0 rows affected (0.04 sec)



SHOW TABLES;

+----------------+
| Tables_in_aksf |
+----------------+
| departments    |
| employees      |
+----------------+
2 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------


Query 24: Write a query to truncate the Employees table. 


TRUNCATE TABLE EMPLOYEES;

Query OK, 0 rows affected (0.12 sec)



SELECT * FROM EMPLOYEES;
Empty set (0.00 sec)


DESC EMPLOYEES;
+---------------+-------------+------+-----+---------+-------+
| Field         | Type        | Null | Key | Default | Extra |
+---------------+-------------+------+-----+---------+-------+
| EMPLOYEE_ID   | int         | NO   | PRI | NULL    |       |
| FIRST_NAME    | varchar(20) | NO   |     | NULL    |       |
| LAST_NAME     | varchar(20) | NO   |     | NULL    |       |
| EMAIL         | varchar(50) | YES  | UNI | NULL    |       |
| HIRE_DATE     | date        | NO   |     | NULL    |       |
| SALARY        | int         | YES  |     | NULL    |       |
| DEPARTMENT_ID | int         | YES  | MUL | NULL    |       |
| PHONE_NUMBER  | varchar(15) | YES  | UNI | NULL    |       |
+---------------+-------------+------+-----+---------+-------+
8 rows in set (0.00 sec)


-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

